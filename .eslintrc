# @Author: Thomas Bouder <tbouder>
# @Date:   jeudi 07 septembre 2017 - 11:49:27
# @Email:  Tbouder@protonmail.com
# @Filename: .eslintrc
# @Last modified by:   tbouder
# @Last modified time: jeudi 14 septembre 2017 - 13:04:22

{
	parser: "babel-eslint",
	plugins: ['react', 'react-native', 'import'],
	env:
	{
		es6: true,
		browser: true,
		node: true
	},
	parserOptions:
	{
		ecmaVersion: 6,
		ecmaFeatures:
		{
			jsx: true,
			generators: false,
			objectLiteralDuplicateProperties: false
		},
		sourceType: 'module'
	},
	rules:
	{
		//React Native Specific Rules
		react-native/no-unused-styles: 2,
		react-native/no-inline-styles: 2,
		react-native/no-color-literals: 2,

		//Warning if a state is define but not used
		react/no-unused-state: 2,

		// require a shouldComponentUpdate method, or PureRenderMixin
		react/require-optimization: 1,

		react/no-unused-prop-types: 2,

		//Disallow strict mode directives
		strict: [2, 'never'],

		// Enforce spaces inside of brackets -> http://eslint.org/docs/rules/array-bracket-spacing
		'array-bracket-spacing': [2, 'never'],

		// Enforce spacing inside single-line blocks -> http://eslint.org/docs/rules/block-spacing
		'block-spacing': [2, 'never'],

		// Enforce allman brace style -> http://eslint.org/docs/rules/brace-style#allman
		"brace-style": ["error", "allman", {"allowSingleLine": true}],

		// Require camel case names -> http://eslint.org/docs/rules/camelcase
		camelcase: [2, {properties: 'always'}],

		// Disallow capitalization of the first letter of a comment -> http://eslint.org/docs/rules/capitalized-comments
		'capitalized-comments': [0, 'always',
		{
			line:
			{
				ignorePattern: '',
				ignoreInlineComments: false,
				ignoreConsecutiveComments: false
			},
			block:
			{
				ignorePattern: '',
				ignoreInlineComments: false,
				ignoreConsecutiveComments: false
			}
		}],

		// Enforce spacing before and after comma -> http://eslint.org/docs/rules/comma-spacing
		'comma-spacing': ['error', {before: false, after: true}],

		// Enforce comma at the end of the line and never at first -> http://eslint.org/docs/rules/comma-style
		'comma-style': ['error', 'last'],

		// Disallow padding inside computed properties -> http://eslint.org/docs/rules/computed-property-spacing
		'computed-property-spacing': ['error', 'never'],

		// Enforces consistent naming when capturing the current execution context -> http://eslint.org/docs/rules/consistent-this
		'consistent-this': ['error', 'that'],

		// Enforce newline at the end of file, with no multiple empty lines -> http://eslint.org/docs/rules/eol-last
		'eol-last': ['error', 'always'],

		// Disallowspacing between functions and their invocations -> http://eslint.org/docs/rules/func-call-spacing
		'func-call-spacing': ['error', 'never'],

		// requires function names to match the name of the variable or property to which they are assigned -> http://eslint.org/docs/rules/func-name-matching
		'func-name-matching': ['error', 'always'],

		// require function expressions to have a name -> http://eslint.org/docs/rules/func-names
		'func-names': ['error', 'always'],

		// enforces use of function declarations or expressions -> http://eslint.org/docs/rules/func-style
		'func-style': ['error', 'expression', {'allowArrowFunctions': true}],

		// this option sets a specific tab width for your code -> http://eslint.org/docs/rules/indent
		indent: ['error', 'tab',
		{
			SwitchCase: 1,
			VariableDeclarator: 1,
			outerIIFEBody: 1,
			MemberExpression: 0,
			CallExpression: {'arguments': 'first'},
			FunctionDeclaration:
			{
				parameters: 1,
				body: 1
			},
			FunctionExpression:
			{
				parameters: 1,
				body: 1
			}
		}],

//CHEACKED
//
//
//
//
//
//
//!CHEACKED

	   // enforces spacing between keys and values in object literal properties
	   // 'key-spacing': ['error', { beforeColon: false, afterColon: true }],
	   'key-spacing': ['error', {'mode': 'minimum'}],

	   // require a space before & after certain keywords
	   'keyword-spacing': ['error', {
		 before: true,
		 after: true,
		 overrides: {
		   return: { after: true },
		   throw: { after: true },
		   case: { after: true }
		 }
	   }],

	   // enforce position of line comments
	   // http://eslint.org/docs/rules/line-comment-position
	   // TODO: enable?
	   'line-comment-position': ['off', {
		 position: 'above',
		 ignorePattern: '',
		 applyDefaultPatterns: true,
	   }],

	   // disallow mixed 'LF' and 'CRLF' as linebreaks
	   // http://eslint.org/docs/rules/linebreak-style
	   'linebreak-style': ['error', 'unix'],

	   // enforces empty lines around comments
	   'lines-around-comment': 'off',

	   // require or disallow newlines around directives
	   // http://eslint.org/docs/rules/lines-around-directive
	   'lines-around-directive': ['error', {
		 before: 'always',
		 after: 'always',
	   }],

	   // specify the maximum depth that blocks can be nested
	   'max-depth': ['off', 4],

	   // specify the max number of lines in a file
	   // http://eslint.org/docs/rules/max-lines
	   'max-lines': ['off', {
		 max: 300,
		 skipBlankLines: true,
		 skipComments: true
	   }],

	   // specify the maximum depth callbacks can be nested
	   'max-nested-callbacks': 'off',

	   // limits the number of parameters that can be used in the function declaration.
	   'max-params': ['off', 3],

	   // specify the maximum number of statement allowed in a function
	   'max-statements': ['off', 10],

	   // restrict the number of statements per line
	   // http://eslint.org/docs/rules/max-statements-per-line
	   'max-statements-per-line': ['off', { max: 1 }],

	   // require multiline ternary
	   // http://eslint.org/docs/rules/multiline-ternary
	   // TODO: enable?
	   'multiline-ternary': ['off', 'never'],

	   // require a capital letter for constructors
	   'new-cap': ['error', {
		 newIsCap: true,
		 newIsCapExceptions: [],
		 capIsNew: false,
		 capIsNewExceptions: ['Immutable.Map', 'Immutable.Set', 'Immutable.List'],
	   }],

	   // disallow the omission of parentheses when invoking a constructor with no arguments
	   // http://eslint.org/docs/rules/new-parens
	   'new-parens': 'error',

	   // allow/disallow an empty newline after var statement
	   'newline-after-var': 'off',

	   // http://eslint.org/docs/rules/newline-before-return
	   'newline-before-return': 'off',

	   // enforces new line after each method call in the chain to make it
	   // more readable and easy to maintain
	   // http://eslint.org/docs/rules/newline-per-chained-call
	   'newline-per-chained-call': ['error', { ignoreChainWithDepth: 4 }],

	   // disallow use of the Array constructor
	   'no-array-constructor': 'error',

	   // disallow use of bitwise operators
	   // http://eslint.org/docs/rules/no-bitwise
	#    'no-bitwise': 'error',

	   // disallow use of the continue statement
	   // http://eslint.org/docs/rules/no-continue
	   'no-continue': 'error',

	   // disallow comments inline after code
	   'no-inline-comments': 'off',

	   // disallow if as the only statement in an else block
	   // http://eslint.org/docs/rules/no-lonely-if
	   'no-lonely-if': 'error',

	   // disallow un-paren'd mixes of different operators
	   // http://eslint.org/docs/rules/no-mixed-operators
	   'no-mixed-operators': ['error', {
		 groups: [
		   ['+', '-', '*', '/', '%', '**'],
		   ['&', '|', '^', '~', '<<', '>>', '>>>'],
		   ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
		   ['&&', '||'],
		   ['in', 'instanceof']
		 ],
		 allowSamePrecedence: false
	   }],

	   // disallow mixed spaces and tabs for indentation
	   'no-mixed-spaces-and-tabs': 'error',

	   // disallow use of chained assignment expressions
	   // http://eslint.org/docs/rules/no-multi-assign
	   'no-multi-assign': ['error'],

	   // disallow multiple empty lines and only one newline at the end
	   'no-multiple-empty-lines': ['error', { max: 2, maxEOF: 1 }],

	   // disallow negated conditions
	   // http://eslint.org/docs/rules/no-negated-condition
	   'no-negated-condition': 'off',

	   // disallow nested ternary expressions
	   'no-nested-ternary': 'error',

	   // disallow use of the Object constructor
	   'no-new-object': 'error',

	   // disallow use of unary operators, ++ and --
	   // http://eslint.org/docs/rules/no-plusplus
	   'no-plusplus': 'error',

	   // disallow certain syntax forms
	   // http://eslint.org/docs/rules/no-restricted-syntax
	   'no-restricted-syntax': [
		 'error',
		 {
		   selector: 'ForInStatement',
		   message: 'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
		 },
		 {
		   selector: 'ForOfStatement',
		   message: 'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',
		 },
		 {
		   selector: 'LabeledStatement',
		   message: 'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
		 },
		 {
		   selector: 'WithStatement',
		   message: '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
		 },
	   ],

	   // disallow space between function identifier and application
	   'no-spaced-func': 'error',

	   // disallow the use of ternary operators
	   'no-ternary': 'off',

	   // disallow trailing whitespace at the end of lines
	   'no-trailing-spaces': 'error',

	   // disallow dangling underscores in identifiers
	#    'no-underscore-dangle': ['error', { allowAfterThis: false }],

	   // disallow the use of Boolean literals in conditional expressions
	   // also, prefer `a || b` over `a ? a : b`
	   // http://eslint.org/docs/rules/no-unneeded-ternary
	   'no-unneeded-ternary': ['error', { defaultAssignment: false }],

	   // disallow whitespace before properties
	   // http://eslint.org/docs/rules/no-whitespace-before-property
	   'no-whitespace-before-property': 'error',

	   // enforce the location of single-line statements
	   // http://eslint.org/docs/rules/nonblock-statement-body-position
	   'nonblock-statement-body-position': 'off',

	   // require padding inside curly braces
	   'object-curly-spacing': ['error', 'never'],

	   // enforce line breaks between braces
	   // http://eslint.org/docs/rules/object-curly-newline
	   // TODO: enable once https://github.com/eslint/eslint/issues/6488 is resolved
	   'object-curly-newline': ['off', {
		 ObjectExpression: { minProperties: 0, multiline: true },
		 ObjectPattern: { minProperties: 0, multiline: true }
	   }],

	   // enforce "same line" or "multiple line" on object properties.
	   // http://eslint.org/docs/rules/object-property-newline
	   'object-property-newline': ['error', {
		 allowMultiplePropertiesPerLine: true,
	   }],

	   // allow just one var statement per function
	   'one-var': ['error', 'never'],

	   // require a newline around variable declaration
	   // http://eslint.org/docs/rules/one-var-declaration-per-line
	   'one-var-declaration-per-line': ['error', 'always'],

	   // require assignment operator shorthand where possible or prohibit it entirely
	   // http://eslint.org/docs/rules/operator-assignment
	   'operator-assignment': ['error', 'always'],

	   // enforce operators to be placed before or after line breaks
	   'operator-linebreak': 'off',

	   // enforce padding within blocks
	   'padded-blocks': ['error', 'never'],

	   // require quotes around object literal property names
	   // http://eslint.org/docs/rules/quote-props.html
	   'quote-props': ['error', 'as-needed', { keywords: false, unnecessary: true, numbers: false }],

	   // specify whether double or single quotes should be used
	   quotes: ['error', 'single', { avoidEscape: true }],

	   // do not require jsdoc
	   // http://eslint.org/docs/rules/require-jsdoc
	   'require-jsdoc': 'off',

	   // require or disallow use of semicolons instead of ASI
	   semi: ['error', 'always'],

	   // enforce spacing before and after semicolons
	   'semi-spacing': ['error', { before: false, after: true }],

	   // requires object keys to be sorted
	   'sort-keys': ['off', 'asc', { caseSensitive: false, natural: true }],

	   // sort variables within the same declaration block
	   'sort-vars': 'off',

	   // require or disallow space before blocks
	   'space-before-blocks': 'error',

	   // require or disallow space before function opening parenthesis
	   // http://eslint.org/docs/rules/space-before-function-paren
	   'space-before-function-paren': ['error', {
		 anonymous: 'always',
		 named: 'never',
		 asyncArrow: 'always'
	   }],

	   // require or disallow spaces inside parentheses
	   'space-in-parens': ['error', 'never'],

	   // require spaces around operators
	   'space-infix-ops': 'error',

	   // Require or disallow spaces before/after unary operators
	   // http://eslint.org/docs/rules/space-unary-ops
	   'space-unary-ops': ['error', {
		 words: true,
		 nonwords: false,
		 overrides: {
		 },
	   }],

	   // Require or disallow spacing between template tags and their literals
	   // http://eslint.org/docs/rules/template-tag-spacing
	   // TODO: enable, semver-major
	   'template-tag-spacing': ['off', 'never'],

	   // require or disallow the Unicode Byte Order Mark
	   // http://eslint.org/docs/rules/unicode-bom
	   'unicode-bom': ['error', 'never'],

	   // require regex literals to be wrapped in parentheses
	   'wrap-regex': 'off',


	  /*
	  *a ES6
	  */
	  // enforces no braces where they can be omitted
	   // 'arrow-body-style': [2, 'as-needed', {
	   //   requireReturnForObjectLiteral: false,
	   // }],
	  // require parens in arrow function arguments
		  'arrow-parens': [2, 'as-needed', {
			requireForBlockBody: true,
		  }],
		 // require space before/after arrow function's arrow
		  'arrow-spacing': [2, { before: true, after: true }],
		 // verify super() callings in constructors
		  'constructor-super': 2,
		 // enforce the spacing around the * in generator functions
		  'generator-star-spacing': [2, { before: false, after: true }],
		 // disallow modifying variables of class declarations
		  'no-class-assign': 2,
		 // disallow arrow functions where they could be confused with comparisons
		  'no-confusing-arrow': [2, {
			allowParens: true,
		  }],
		 // disallow modifying variables that are declared using const
		  'no-const-assign': 2,
		 // disallow duplicate class members
		  'no-dupe-class-members': 2,
		 // disallow importing from the same path more than once
		  'no-duplicate-imports': 'off',
		 // disallow symbol constructor
		  'no-new-symbol': 2,
		 // disallow specific imports
		  'no-restricted-imports': 'off',
		 // disallow to use this/super before super() calling in constructors.
		  'no-this-before-super': 2,
		 // disallow useless computed property keys
		  'no-useless-computed-key': 2,
		 // disallow unnecessary constructor
		  'no-useless-constructor': 2,
		 // disallow renaming import, export, and destructured assignments to the same name
		  'no-useless-rename': [2, {
			ignoreDestructuring: false,
			ignoreImport: false,
			ignoreExport: false,
		  }],
		 // require let or const instead of var
		  'no-var': 2,
		 // require method and property shorthand syntax for object literals
		  'object-shorthand': [2, 'always', {
			ignoreConstructors: false,
			avoidQuotes: true,
		  }],
		 // suggest using arrow functions as callbacks
		  'prefer-arrow-callback': [2, {
			allowNamedFunctions: false,
			allowUnboundThis: true,
		  }],
		 // suggest using of const declaration for variables that are never modified after declared
		  'prefer-const': [2, {
			destructuring: 'any',
			ignoreReadBeforeAssign: true,
		  }],
		 // Prefer destructuring from arrays and objects
		  // TODO: enable
		  'prefer-destructuring': ['off', {
			array: true,
			object: true,
		  }, {
			enforceForRenamedProperties: false,
		  }],
		 // disallow parseInt() in favor of binary, octal, and hexadecimal literals
		  'prefer-numeric-literals': 2,
		 // suggest using Reflect methods where applicable
		  // TODO: enable?
		  'prefer-reflect': 'off',
		 // use rest parameters instead of arguments
		  'prefer-rest-params': 2,
		 // suggest using the spread operator instead of .apply()
		  'prefer-spread': 2,
		 // suggest using template literals instead of string concatenation
		  'prefer-template': 2,
		 // disallow generator functions that do not have yield
		  'require-yield': 2,
		 // enforce spacing between object rest-spread
		  'rest-spread-spacing': [2, 'never'],
		 // import sorting
		  'sort-imports': ['off', {
			ignoreCase: false,
			ignoreMemberSort: false,
			memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],
		  }],
		 // require a Symbol description
		  'symbol-description': 2,
		 // enforce usage of spacing in template strings
		  'template-curly-spacing': 2,
		 // enforce spacing around the * in yield* expressions
		  'yield-star-spacing': [2, 'after'],
	  /*
	  *a VARIABLES
	  */
		 // enforce or disallow variable initializations at definition
		  'init-declarations': 0,
		  // disallow the catch clause parameter name being the same as a variable in the outer scope
		  'no-catch-shadow': 0,
		  // disallow deletion of variables
		  'no-delete-var': 2,
		  // disallow labels that share a name with a variable
		  'no-label-var': 2,
		  // disallow specific globals
		  'no-restricted-globals': 0,
		  // disallow declaration of variables already declared in the outer scope
		  'no-shadow': 2,
		  // disallow shadowing of names such as arguments
		  'no-shadow-restricted-names': 2,
		  // disallow use of undeclared variables unless mentioned in a /*global */ block
		  // 'no-undef': 2,
		  // disallow use of undefined when initializing variables
		  'no-undef-init': 2,
		  // disallow use of undefined variable
		  'no-undefined': 0,
		  // disallow declaration of variables that are not used in the code
		  'no-unused-vars': [2, { vars: 'local', args: 'after-used', ignoreRestSiblings: true }],
		  // disallow use of variables before they are defined
		  // 'no-use-before-define': [2, { functions: true, classes: true, variables: true }],
	  /*
	  *a NODE
	  */
		 // restrict usage of specified node modules
		 'no-restricted-modules': 0,
		 // disallow use of synchronous methods (off by default)
		 'no-sync': 0,
		 // enforce return after a callback
		 'callback-return': 0,
		 // disallow process.exit()
		 'no-process-exit': 1,
		 // disallow mixing regular variable and require declarations
		  'no-mixed-requires': [1, {grouping: false, allowCall: false}],
		 // enforces error handling in callbacks (node environment)
		  'handle-callback-err': 2,
		 // disallow use of new operator with the require function
		  'no-new-require': 2,
		 // disallow string concatenation with __dirname and __filename
		  'no-path-concat': 2,
		 // disallow use of process.env
		 'no-process-env': 2,
	  /*
	  **Import
	  */
		 // ensure named imports coupled with named exports
		 'import/named': 0,
		 // https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/namespace.md
		  'import/namespace': 0,
		 // disallow use of jsdoc-marked-deprecated imports
		  'import/no-deprecated': 0,
		 // No Node.js builtin modules
		  'import/no-nodejs-modules': 0,
		 // disallow namespace imports
		  'import/no-namespace': 0,
		 // Restrict which files can be imported in a given folder
		  'import/no-restricted-paths': 0,
		 // Forbid modules to have too many dependencies
		  'import/max-dependencies': [0, { max: 10 }],
		 // prevent importing the submodules of other modules
		  'import/no-internal-modules': [0, {allow: []}],
		 // Prevent unassigned imports
		  'import/no-unassigned-import': 0,
		 // Warn if a module could be mistakenly parsed as a script by a consumer leveraging Unambiguous JavaScript Grammar
		  'import/unambiguous': 0,
		 // ensure default import coupled with default export
		 'import/default': 2,
		 // disallow invalid exports, e.g. multiple defaults
		  'import/export': 2,
		 // do not allow a default import name to match a named export
		  'import/no-named-as-default': 2,
		 // warn on accessing default export property names that are also named exports
		  'import/no-named-as-default-member': 0,
		 // Forbid mutable exports
		  'import/no-mutable-exports': 2,
		 // disallow require()
		  // 'import/no-commonjs': 2,
		 // disallow AMD require/define
		  'import/no-amd': 2,
		 // disallow non-import statements appearing before import statements
		  'import/first': [2, 'absolute-first'],
		 // disallow duplicate imports
		  'import/no-duplicates': 2,
		 // Require a newline after the last import/require in a group
		  'import/newline-after-import': 2,
		  // Require modules with a single export to use a default export
		  'import/prefer-default-export': 2,
		 // Forbid import of modules using absolute paths
		  'import/no-absolute-path': 2,
		  // Forbid require() calls with expressions
		  'import/no-dynamic-require': 2,
		 // Prevent importing the default as if it were named
		  'import/no-named-default': 2,
		 // Forbid Webpack loader syntax in imports
		  'import/no-webpack-loader-syntax': 2,
		 // Forbid the use of extraneous packages
		  // paths are treated both as absolute paths, and relative to process.cwd()
		  'import/no-extraneous-dependencies': [2,
		 {
			devDependencies:
			[
			   'test/**', // tape, common npm pattern
			   'tests/**', // also common npm pattern
			   'spec/**', // mocha, rspec-like pattern
			   '**/__tests__/**', // jest pattern
			   'test.js', // repos with a single test file
			   'test-*.js', // repos with multiple top-level test files
			   '**/*.test.js', // tests where the extension denotes that it is a test
			   '**/*.spec.js', // tests where the extension denotes that it is a test
			   '**/webpack.config.js', // webpack config
			   '**/webpack.config.*.js', // webpack config
			   '**/rollup.config.js', // rollup config
			   '**/gulpfile.js', // gulp config
			   '**/gulpfile.*.js', // gulp config
			   '**/Gruntfile', // grunt config
			],
			optionalDependencies: false,
		 }],
	  /*
	  *a BEST PRACTICES
	  */
		 // enforces getter/setter pairs in objects
		 'accessor-pairs': 2,
		 // enforces return statements in callbacks of array's methods
		 // 'array-callback-return': 2,
		 // treat var statements as if they were block scoped
		 'block-scoped-var': 2,
		 // specify the maximum cyclomatic complexity allowed in a program
		 complexity: [0, 11],
		 // require return statements to either always or never specify values
		 // 'consistent-return': 2,
		 // specify curly brace conventions for all control statements
		 curly: [2, 'multi-or-nest'],
		 // require default case in switch statements
		 'default-case': [2, {commentPattern: '^no default$'}],
		 // encourages use of dot notation whenever possible
		 'dot-notation': [2, {allowKeywords: true}],
		 // enforces consistent newlines before or after dots
		 'dot-location': [2, 'property'],
		 // require the use of === and !==
		 eqeqeq: [2, 'always', {null: 'ignore'}],
		 // make sure for-in loops have an if statement
		 'guard-for-in': 2,
		 // disallow the use of alert, confirm, and prompt
		 'no-alert': 1,
		 // disallow use of arguments.caller or arguments.callee
		 'no-caller': 2,
		 // disallow lexical declarations in case/default clauses
		 'no-case-declarations': 2,
		 // disallow division operators explicitly at beginning of regular expression
		 'no-div-regex': 0,
		 // disallow else after a return in an if
		 'no-else-return': 2,
		 // disallow empty functions, except for standalone funcs/arrows
		 'no-empty-function': [2,
		 {
			allow:
			[
			   'arrowFunctions',
			   'functions',
			   'methods'
			]
		 }],
		 // disallow empty destructuring patterns
		 'no-empty-pattern': 2,
		 // disallow comparisons to null without a type-checking operator
		 'no-eq-null': 0,
		 // disallow use of eval()
		 'no-eval': 2,
		 // disallow adding to native types
		 // 'no-extend-native': 2,
		 // disallow unnecessary function binding
		 'no-extra-bind': 2,
		 // disallow Unnecessary Labels
		 'no-extra-label': 2,
		 // disallow fallthrough of case statements
		 'no-fallthrough': 2,
		 // disallow the use of leading or trailing decimal points in numeric literals
		 'no-floating-decimal': 2,
		 // disallow reassignments of native objects or read-only globals
		 'no-global-assign': [2, { exceptions: [] }],
		 // disallow implicit type conversions
		 'no-implicit-coercion': [0,
		 {
			boolean: false,
			number: true,
			string: true,
			allow: []
		 }],
		 // disallow var and named functions in global scope
		 'no-implicit-globals': 0,
		 // disallow use of eval()-like methods
		 'no-implied-eval': 2,
		 // disallow this keywords outside of classes or class-like objects
		 'no-invalid-this': 0,
		 // disallow usage of __iterator__ property
		 'no-iterator': 2,
		 // disallow use of labels for anything other then loops and switches
		 'no-labels': [2, { allowLoop: false, allowSwitch: false }],
		 // disallow unnecessary nested blocks
		 'no-lone-blocks': 2,
		 // disallow creation of functions within loops
		 'no-loop-func': 1,
		 // disallow magic numbers
		 'no-magic-numbers': [0,
		 {
			ignore: [],
			ignoreArrayIndexes: true,
a                   enforceConst: true,
			detectObjects: false
		 }],
		 // disallow use of multiple spaces
		 'no-multi-spaces': 2,
		 // disallow use of multiline strings
		 'no-multi-str': 2,
		 // disallow use of new operator when not part of the assignment or comparison
		 'no-new': 2,
		 // disallow use of new operator for Function object
		 'no-new-func': 2,
		 // disallows creating new instances of String, Number, and Boolean
		 'no-new-wrappers': 2,
		 // disallow use of (old style) octal literals
		 'no-octal': 2,
		 // disallow use of octal escape sequences in string literals, such as
		 'no-octal-escape': 2,
		 // disallow reassignment of function parameters
		 // disallow parameter object manipulation except for specific exclusions
		 'no-param-reassign': [0,
		 {
			props: true,
			ignorePropertyModificationsFor:
			[
			   'acc', // for reduce accumulators
			   'e', // for e.returnvalue
			   'ctx', // for Koa routing
			   'req', // for Express requests
			   'request', // for Express requests
			   'res', // for Express responses
			   'response', // for Express responses
			   '$scope' // for Angular 1 scopes
			]
		 }],
		 // disallow usage of __proto__ property
		 'no-proto': 2,
		 // disallow declaring the same variable more then once
		 'no-redeclare': 2,
		 // disallow certain object properties
		 'no-restricted-properties': [2,
		 {
			object: 'arguments',
			property: 'callee',
			message: 'arguments.callee is deprecated'
		 },
		 {
			property: '__defineGetter__',
			message: 'Please use Object.defineProperty instead.'
		 },
		 {
			property: '__defineSetter__',
			message: 'Please use Object.defineProperty instead.'
		 },
		 {
			object: 'Math',
			property: 'pow',
			message: 'Use the exponentiation operator (**) instead.'
		 }],
		 // disallow use of assignment in return statement
		 // 'no-return-assign': 2,
		 // disallow redundant `return await`
		 'no-return-await': 2,
		 // disallow use of `javascript:` urls.
		 'no-script-url': 2,
		 // disallow self assignment
		 'no-self-assign': 2,
		 // disallow comparisons where both sides are exactly the same
		 'no-self-compare': 2,
		 // disallow use of comma operator
		 'no-sequences': 2,
		 // restrict what can be thrown as an exception
		 'no-throw-literal': 2,
		 // disallow unmodified conditions of loops
		 'no-unmodified-loop-condition': 0,
		 // disallow usage of expressions in statement position
		 'no-unused-expressions': [2,
		 {
			allowShortCircuit: false,
			allowTernary: false,
			allowTaggedTemplates: false
		 }],
		 // disallow unused labels
		 'no-unused-labels': 2,
		 // disallow unnecessary .call() and .apply()
		 'no-useless-call': 0,
		 // disallow useless string concatenation
		 'no-useless-concat': 2,
		 // disallow unnecessary string escaping
		 'no-useless-escape': 2,
		 // disallow redundant return; keywords
		 'no-useless-return': 2,
		 // disallow use of void operator
		 'no-void': 2,
		 // disallow usage of configurable warning terms in comments: e.g. todo
		 'no-warning-comments': [0, { terms: ['todo', 'fixme', 'xxx'], location: 'start' }],
		 // disallow use of the with statement
		 'no-with': 2,
		 // require using Error objects as Promise rejection reasons
		 'prefer-promise-reject-errors': [0, { allowEmptyReject: true }],
		 // require use of the second argument for parseInt()
		 radix: 2,
		 // require `await` in `async function` (note: this is a horrible rule that should never be used)
		 'require-await': 0,
		 // requires to declare all vars on top of their containing scope
		 'vars-on-top': 2,
		 // require immediate function invocation to be wrapped in parentheses
		 'wrap-iife': [2, 'outside', { functionPrototypeMethods: false }],
		 // require or disallow Yoda conditions
		 yoda: 2,
	  /*
	  **ERRORS
	  */
		 // require trailing commas in multiline object literals
		  'comma-dangle': [2, 'never'],
		 // Disallow await inside of loops
		  'no-await-in-loop': 1,
		 // Disallow comparisons to negative zero
		  'no-compare-neg-zero': 0,
		 // disallow assignment in conditional expressions
		  'no-cond-assign': [2, 'always'],
		 // disallow use of console
		  'no-console': 0,
		 // disallow use of constant expressions in conditions
		  'no-constant-condition': 1,
		 // disallow control characters in regular expressions
		  'no-control-regex': 2,
		 // disallow use of debugger
		  'no-debugger': 2,
		 // disallow duplicate arguments in functions
		  'no-dupe-args': 2,
		 // disallow duplicate keys when creating object literals
		  'no-dupe-keys': 2,
		 // disallow a duplicate case label.
		  'no-duplicate-case': 2,
		 // disallow empty statements
		  'no-empty': 2,
		 // disallow the use of empty character classes in regular expressions
		  'no-empty-character-class': 2,
		 // disallow assigning to the exception in a catch block
		  'no-ex-assign': 2,
		 // disallow double-negation boolean casts in a boolean context
		  'no-extra-boolean-cast': 2,
		 // disallow unnecessary parentheses
		  'no-extra-parens': [0, 'all',
		 {
			conditionalAssign: true,
			nestedBinaryExpressions: false,
			returnAssign: false,
		 }],
		 // disallow unnecessary semicolons
		  'no-extra-semi': 2,
		 // disallow overwriting functions written as function declarations
		  'no-func-assign': 2,
		 // disallow function or variable declarations in nested blocks
		  'no-inner-declarations': 2,
		 // disallow invalid regular expression strings in the RegExp constructor
		  'no-invalid-regexp': 2,
		 // disallow irregular whitespace outside of strings and comments
		  'no-irregular-whitespace': 2,
		 // disallow the use of object properties of the global object (Math and JSON) as functions
		  'no-obj-calls': 2,
		 // disallow use of Object.prototypes builtins directly
		  'no-prototype-builtins': 2,
		 // disallow multiple spaces in a regular expression literal
		  'no-regex-spaces': 2,
		 // disallow sparse arrays
		  'no-sparse-arrays': 2,
		 // Disallow template literal placeholder syntax in regular strings
		  'no-template-curly-in-string': 2,
		 // Avoid code that looks like two expressions but is actually one
		  'no-unexpected-multiline': 2,
		 // disallow unreachable statements after a return, throw, continue, or break statement
		  'no-unreachable': 2,
		 // disallow return/throw/break/continue inside finally blocks
		  'no-unsafe-finally': 2,
		 // disallow negating the left operand of relational operators
		  'no-unsafe-negation': 2,
		  // disallow negation of the left operand of an in expression
		  // deprecated in favor of no-unsafe-negation
		  'no-negated-in-lhs': 0,
		 // disallow comparisons with the value NaN
		  'use-isnan': 2,
		 // ensure JSDoc comments are valid
		  'valid-jsdoc': 0,
		 // ensure that the results of typeof are compared against a valid string
		  'valid-typeof': [2, { requireStringLiterals: true }],
	  /*
	  ** REACT
	  */
		 // Specify whether double or single quotes should be used in JSX attributes
		 'jsx-quotes': [2, 'prefer-single'],
		 // Prevent missing displayName in a React component definition
		 'react/display-name': [0, { ignoreTranspilerName: false }],
		 // Forbid certain propTypes (any, array, object)
		 'react/forbid-prop-types': [2, {forbid: ['any']}],
		 // Enforce boolean attributes notation in JSX
		 'react/jsx-boolean-value': [2, 'never'],
		 // Validate closing bracket location in JSX
		 'react/jsx-closing-bracket-location': [2, 'after-props'],
		 // Enforce or disallow spaces inside of curly braces in JSX attributes
		 'react/jsx-curly-spacing': [2, 'never', { allowMultiline: true }],
		 // Enforce event handler naming conventions in JSX
		 'react/jsx-handler-names': [0, {
		   eventHandlerPrefix: 'handle',
		   eventHandlerPropPrefix: 'on',
		 }],
		 // Validate props indentation in JSX
		 'react/jsx-indent-props': [2, 'tab'],
		 // Validate JSX has key prop when in array or iterator
		 'react/jsx-key': 0,
		 // Limit maximum of props on a single line in JSX
		 'react/jsx-max-props-per-line': [0, { maximum: 1 }],
		 // Prevent usage of .bind() in JSX props
		 'react/jsx-no-bind': [2, {
		   ignoreRefs: true,
		   allowArrowFunctions: true,
		   allowBind: false,
		 }],
		 // Prevent duplicate props in JSX
		 'react/jsx-no-duplicate-props': [2, { ignoreCase: true }],
		 // Prevent usage of unwrapped JSX strings
		 'react/jsx-no-literals': 0,
		 // Disallow undeclared variables in JSX
		 'react/jsx-no-undef': 2,
		 // Enforce PascalCase for user-defined JSX components
		 'react/jsx-pascal-case': [2, {
		   allowAllCaps: true,
		   ignore: [],
		 }],
		 // Enforce propTypes declarations alphabetical sorting
		 'react/sort-prop-types': [0, {
		   ignoreCase: true,
		   callbacksLast: false,
		   requiredFirst: false,
		 }],
		 // Deprecated in favor of react/jsx-sort-props
		 'react/jsx-sort-prop-types': 0,
		 // Enforce props alphabetical sorting
		 'react/jsx-sort-props': [0, {
		   ignoreCase: true,
		   callbacksLast: false,
		   shorthandFirst: false,
		   shorthandLast: false,
		 }],
		 // Prevent React to be incorrectly marked as unused
		 'react/jsx-uses-react': [2],
		 // Prevent variables used in JSX to be incorrectly marked as unused
		 'react/jsx-uses-vars': 2,
		 // Prevent usage of dangerous JSX properties
		 'react/no-danger': 1,
		 // Prevent usage of deprecated methods
		 'react/no-deprecated': [2],
		 // Prevent usage of setState in componentDidMount
		 'react/no-did-mount-set-state': [2],
		 // Prevent usage of setState in componentDidUpdate
		 'react/no-did-update-set-state': [2],
		 // Prevent direct mutation of this.state
		 'react/no-direct-mutation-state': 0,
		 // Prevent usage of isMounted
		 'react/no-is-mounted': 2,
		 // Prevent usage of setState
		 'react/no-set-state': 0,
		 // Prevent using string references
		 'react/no-string-refs': 2,
		 // Prevent usage of unknown DOM property
		 'react/no-unknown-property': 2,
		 // Require ES6 class declarations over React.createClass
		 'react/prefer-es6-class': [2, 'always'],
		 // Prevent missing React when using JSX
		 'react/react-in-jsx-scope': 2,
		 // Restrict file extensions that may be required
		 // deprecated in favor of import/extensions
		 'react/require-extension': [0, { extensions: ['.jsx', '.js'] }],
		 // Require render() methods to return something
		 'react/require-render-return': 2,
		 // Prevent extra closing tags for components without children
		 'react/self-closing-comp': 2,
		 // Enforce spaces before the closing bracket of self-closing JSX elements
		 'react/jsx-space-before-closing': [2, 'always'],
		 // Enforce component methods order
		 'react/sort-comp': [2, {
		   order: [
			'static-methods',
			// 'lifecycle',
			// '/^on.+$/',
			// '/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/',
			'everything-else',
			// '/^render.+$/',
			'render'
		   ],
		 }],
		 // Prevent missing parentheses around multilines JSX
		 'react/jsx-wrap-multilines': [2, {
		   declaration: true,
		   assignment: true,
		   return: true
		 }],
		 'react/wrap-multilines': 0, // deprecated version
		 // Require that the first prop in a JSX element be on a new line when the element is multiline
		 'react/jsx-first-prop-new-line': [2, 'multiline'],
		 // Enforce spacing around jsx equals signs
		 'react/jsx-equals-spacing': [2, 'never'],
		 // Enforce JSX indentation
		 'react/jsx-indent': [2, 'tab'],
		 // Disallow target="_blank" on links
		 'react/jsx-no-target-blank': 2,
		 // prevent accidental JS comments from being injected into JSX as text
		 'react/jsx-no-comment-textnodes': 2,
		 'react/no-comment-textnodes': 0, // deprecated version
		 // disallow using React.render/ReactDOM.render's return value
		 'react/no-render-return-value': 2,
		 // warn against using findDOMNode()
		 'react/no-find-dom-node': 2,
		 // Forbid certain props on Components
		 'react/forbid-component-props': [0, { forbid: [] }],
		 // Prevent problem with children and props.dangerouslySetInnerHTML
		 'react/no-danger-with-children': 2,
		 // Prevent unused propType definitions
		 # 'react/no-unused-prop-types': [2, {
		 #   customValidators: [
		 #   ],
		 #   skipShapeProps: true,
		 # }],
		 // Require style prop value be an object or var
		 'react/style-prop-object': 2,
		 // Prevent invalid characters from appearing in markup
		 'react/no-unescaped-entities': 2,
		 // Prevent passing of children as props
		 'react/no-children-prop': 2,
		 // Validate whitespace in and around the JSX opening and closing brackets
		 'react/jsx-tag-spacing': [2, {
		   closingSlash: 'never',
		   beforeSelfClosing: 'always',
		   afterOpening: 'never'
		 }],
		 // Enforce a defaultProps definition for every prop that is not a required prop
		 'react/require-default-props': 1,
   }
}
